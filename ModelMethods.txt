/**
 * The programmatic interface for the Battleship Model class.
 * This interface supports communication with both the view
 * and controller classes in the Battleship application.
 * 
 * @author Michael Gorsuch
 * @author Anne Thorsteinson
 * @author Joe McLaughlin
 * @author Brandon Heinrich
 */
public class BattleshipModel {
     /**
     * Checks that ship placement is in bounds of board, passes this method
     * before moving on to validateShipPlacement
     * @param row the character of the row
     * @param column the number of the column
     * @param the ship that is being placed
     * @param direction for ship placement, see the direction constants
     * @return true if ship placement is valid  
     * @throws IllegalStateException The game is not in setup Mode
     */
     public boolean shipInBounds(char row, int column, Ship ship, Direction direction) {
         if (setupMode != true) {
             throw new IllegalStateException();
            }
         //need to know length of the ship to test if it fits on board
         int size = ship.getSize();
         //check int values of the character for boundary checking, A = 65, J = 74
         char character = Character.toUpperCase(row);
         //now check if the ship will fall within the legal board boundaries 
         //this does NOT yet check against other ships!!
         if (direction == EAST) {
             return (column + (size-1)) <= 10;
         } else if (direction == SOUTH) {
             return (character + (size-1)) <= 74;
         } else if (direction == NE) {
             return (column + (size-1)) <= 10 && (character - (size-1)) <= 74;
         } else { //direction == SE
             return (column + (size-1)) <= 10 && (character - (size-1)) <= 74;
         }
       
        }
    
     
     /**
      * Helper method to turn alpha numeric input (i.e. A 8) into a number index of the
      * main board array
      * @param alphabetic coordinate of input row
      * @param numerical coordinate of input column
      * @throws IllegalArgumentException if character input is out of bounds
      * @throws IllegalArgumentException if column input is out of bounds
      */
     public int toArrayIndex(char row, int column){
         char character = Character.toUpperCase(row);
         //now the method is going to test the integer values of the character for 
         //boundary checking, A = 65, J = 74
         if (character < 65 || character > 74) {
             throw new IllegalArgumentException("Row input is out of bounds.");
            }
         if (column < 1 || column > 10) {
             throw new IllegalArgumentException("Column input is out of bounds.");
            }
         int arrayIndex = 0;
         switch (character) {
             case 'A': arrayIndex = (10*0) + column;
                break;
             case 'B': arrayIndex = (10*1) + column;
                break;
             case 'C': arrayIndex = (10*2) + column;
                break;
             case 'D': arrayIndex = (10*3) + column;
                break;
             case 'E': arrayIndex = (10*4) + column;
                break;
             case 'F': arrayIndex = (10*5) + column;
                break;
             case 'G': arrayIndex = (10*6) + column;
                break;
             case 'H': arrayIndex = (10*7) + column;
                break;
             case 'I': arrayIndex = (10*8) + column;
                break;
             case 'J': arrayIndex = (10*9) + column;
                break;             
            }
         return arrayIndex;
        }
    }


/**
 * Helper enumerated type for the direction of placement.
 * The direction will determine the method and tests for legality
 * when placing the ship.
 */
 enum Direction {
     //place ship horizonally
     EAST,
     //place ship vertically
     SOUTH,
     //place ship diagonally upwards
     NE,
     //place ship diagonally downwards}
     SE
}

/**
 * Helper enumerated type for the status of the shot.
 */
 enum Status {
     //return status for miss
     MISS,
     //return status for hit
     HIT,
     //return status for last hit on aircraft carrier
     SUNK_AC,
     //return status for last hit on Battleship
     SUNK_B,
     //return status for last hit on a Cruiser
     SUNK_C,
     //return status for last hit on Destroyer1
     SUNK_D1,
     //return status for last hit on Destroyer2
     SUNK_D2
 }